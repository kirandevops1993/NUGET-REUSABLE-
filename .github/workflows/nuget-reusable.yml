name: Reusable NuGet Workflow

on:
  workflow_call:
    inputs:
      solution:
        required: true
        type: string
      searchPattern:
        required: true
        type: string
      configurationToPack:
        required: true
        type: string
      outputdir:
        required: true
        type: string
      majorVersion:
        required: true
        type: number
      minorVersion:
        required: true
        type: number
      patchVersion:
        required: true
        type: number
      apiKey:
        required: true
        type: string
      feedName:
        required: true
        type: string

jobs:
  nuget-tasks:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download NuGet CLI
        run: |
          Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile nuget.exe
        shell: powershell

      - name: Restore Packages
        run: ./nuget.exe restore "${{ inputs.solution }}"
        shell: powershell

      - name: Setup MSBuild Path
        id: msbuild
        run: |
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (!(Test-Path $vswhere)) {
            Write-Error "vswhere.exe not found"
            exit 1
          }
          $msbuild = & $vswhere -latest -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
          if (!$msbuild) {
            Write-Error "MSBuild not found"
            exit 1
          }
          echo "msbuild=$msbuild" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Build Project
        run: |
          & "${{ steps.msbuild.outputs.msbuild }}" `
            "${{ inputs.searchPattern }}" `
            /t:Rebuild `
            /p:Configuration=${{ inputs.configurationToPack }}
        shell: powershell

      - name: NuGet Pack
        run: |
          ./nuget.exe pack "${{ inputs.searchPattern }}" `
            -OutputDirectory "${{ inputs.outputdir }}" `
            -Version "${{ inputs.majorVersion }}.${{ inputs.minorVersion }}.${{ inputs.patchVersion }}"
        shell: powershell

      - name: NuGet Push
        run: |
          ./nuget.exe push "${{ inputs.outputdir }}\*.nupkg" `
            -ApiKey "${{ inputs.apiKey }}" `
            -Source "${{ inputs.feedName }}" `
            -SkipDuplicate
        shell: powershell
