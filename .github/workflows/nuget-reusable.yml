name: Reusable Dotnet Workflow

on:
  workflow_call:
    inputs:
      command:
        required: true
        type: string
      projects:
        required: false
        type: string
      arguments:
        required: false
        type: string
      nugetConfigPath:
        required: false
        type: string
      configuration:
        required: false
        type: string
      packagesToPush:
        required: false
        type: string

jobs:
  dotnet:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.201'

      - name: Execute Dotnet Task
        run: |
          echo "Run CMD=\"${{ inputs.command }}\""
          CMD="${{ inputs.command }}"

          # Fallback for empty inputs to prevent failures
          PROJECTS="${{ inputs.projects || '**/*.csproj' }}"
          CONFIGFILE="${{ inputs.nugetConfigPath || '' }}"
          ARGUMENTS="${{ inputs.arguments || '' }}"
          CONFIGURATION="${{ inputs.configuration || 'Release' }}"
          PACKAGES="${{ inputs.packagesToPush || './nupkgs/*.nupkg' }}"

          if [ "$CMD" = "restore" ]; then
            echo "Restoring project with ${PROJECTS} and config file ${CONFIGFILE}"
            dotnet restore "$PROJECTS" --configfile "$CONFIGFILE"
          fi

          if [ "$CMD" = "build" ]; then
            echo "Building project with ${PROJECTS} and arguments ${ARGUMENTS}"
            dotnet build "$PROJECTS" $ARGUMENTS
          fi

          if [ "$CMD" = "test" ]; then
            echo "Running tests on ${PROJECTS} with arguments ${ARGUMENTS}"
            dotnet test "$PROJECTS" $ARGUMENTS --logger trx
          fi

          if [ "$CMD" = "pack" ]; then
            echo "Packing project with ${PROJECTS} and configuration ${CONFIGURATION}"
            dotnet pack "$PROJECTS" --configuration "$CONFIGURATION" -o ./nupkgs
          fi

          if [ "$CMD" = "push" ]; then
            echo "Pushing packages: ${PACKAGES}"
            dotnet nuget push "$PACKAGES" --source "https://api.nuget.org/v3/index.json"
          fi

          # Catch-all for unsupported command
          if [ "$CMD" != "restore" ] && [ "$CMD" != "build" ] && [ "$CMD" != "test" ] && [ "$CMD" != "pack" ] && [ "$CMD" != "push" ]; then
            echo "Unsupported command: $CMD"
            exit 1
          fi
